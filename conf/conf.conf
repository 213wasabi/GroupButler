env GB_OLD_UPDATE;
env CHANNEL;
env DEFAULT_LANG;
env HELP_GROUP;
env LOG_CHAT;
env LOG_ADMIN;
env LOG_STATS;
env MULTIPURPOSE_PLUGINS;
env POSTGRES_HOST;
env POSTGRES_PORT;
env POSTGRES_USER;
env POSTGRES_PASSWORD;
env POSTGRES_DB;
env REDIS_HOST;
env REDIS_PORT;
env REDIS_DB;
env SOURCE;
env SUPERADMINS;
env TG_TOKEN;
env TG_UPDATES;
env TG_POLLING_LIMIT;
env TG_POLLING_TIMEOUT;
env TG_WEBHOOK_URL;
env TG_WEBHOOK_DOMAIN;
env TG_WEBHOOK_CERT;
env TG_WEBHOOK_MAX_CON;

error_log /dev/stderr notice;

daemon off;
master_process on;
worker_processes auto;
worker_cpu_affinity auto;

events {
	worker_connections 1024;
}

http {
	client_body_buffer_size 1M;
	client_max_body_size 1M;
	log_format combined_no_query '$remote_addr ' '"$request_method $uri" $status $body_bytes_sent ';
	lua_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt;
	lua_ssl_verify_depth 2;
	lua_package_path "$prefix/lua/?.lua;$prefix/lua/vendor/?.lua;;";
	lua_shared_dict info 1m;
	lua_max_running_timers 2048;
	# lua_code_cache off; # only during development
	resolver 127.0.0.11 ipv6=off; # use docker local resolver and disable IPv6
	init_by_lua_file lua/init_nginx.lua;
	server {
		access_log /dev/stdout combined_no_query;
		listen 80;
		charset utf-8;
		charset_types application/json;
		default_type application/json;
		location / {
			access_by_lua_block {
				local config = require "groupbutler.config"
				if not config.telegram.webhook.domain then -- Using custom URL. Don't check for the token
					return
				end
				if not ngx.var.arg_token or (ngx.var.arg_token ~= config.telegram.token) then
					ngx.exit(ngx.HTTP_FORBIDDEN)
				end
				return
			}
			content_by_lua_block {
				require "groupbutler".go()
			}
		}
		location /health {
			access_log /dev/null;
			content_by_lua_block {
				require "groupbutler".health()
			}
		}
	}
}
