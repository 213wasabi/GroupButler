env CHANNEL;
env DEFAULT_LANG;
env HELP_GROUP;
env LOG_CHAT;
env LOG_ADMIN;
env LOG_STATS;
env MULTIPURPOSE_PLUGINS;
env POSTGRES_HOST;
env POSTGRES_PORT;
env POSTGRES_USER;
env POSTGRES_PASSWORD;
env POSTGRES_DB;
env REDIS_HOST;
env REDIS_PORT;
env REDIS_DB;
env SOURCE;
env SUPERADMINS;
env TG_TOKEN;
env TG_UPDATES;
env TG_POLLING_LIMIT;
env TG_POLLING_TIMEOUT;
env TG_WEBHOOK_URL;
env TG_WEBHOOK_CERT;
env TG_WEBHOOK_MAX_CON;

error_log /dev/stderr notice;

daemon off;
master_process on;
worker_processes auto;
worker_cpu_affinity auto;

events {
	worker_connections 1024;
}

http {
	client_body_buffer_size 1M;
	client_max_body_size 1M;
	access_log /dev/stdout;
	lua_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt;
	lua_ssl_verify_depth 2;
	lua_package_path "$prefix/lua/?.lua;$prefix/lua/vendor/?.lua;;";
	# lua_code_cache off; # only during development
	resolver 127.0.0.11 ipv6=off; # use docker local resolver and disable IPv6
	init_worker_by_lua_block {
		require "resty.core" -- Replaces Lua C API bindings with LuaJIT bindings
		local info = ngx.shared.info

		local function bot_init()
			local config = require "groupbutler.config"
			local api = require ("telegram-bot-api.methods").init(config.telegram.token)
			if config.telegram.webhook.url then
				api.setWebhook(config.telegram.webhook.url, config.telegram.webhook.certificate,
				config.telegram.webhook.max_connections, config.telegram.allowed_updates)
			else
				ngx.log(ngx.INFO, "No $TG_WEBHOOK_URL detected. You may not receive updates unless you set your webhook manually.")
			end
		end

		if not info:get('started') then -- Run init code only once
			info:set('started', os.time())
			local ok, err = ngx.timer.at(0, bot_init)
			if not ok then
				ngx.log(ngx.ERR, "failed to create timer: ", err)
				return
			end
		end
	}
	lua_shared_dict info 1m;
	server {
		listen 80;
		charset utf-8;
		charset_types application/json;
		default_type application/json;
		location / {
			content_by_lua_block {
				require("groupbutler").go()
			}
		}
	}
}
