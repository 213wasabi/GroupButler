local config = require "groupbutler.config"
local utilities = require "groupbutler.utilities"
local api = require "telegram-bot-api.methods".init(config.telegram.token)
local locale = require "groupbutler.languages"
local i18n = locale.translate

local _M = {}

_M.__index = _M

setmetatable(_M, {
	__call = function (cls, ...)
		return cls.new(...)
	end,
})

function _M.new(main)
	local self = setmetatable({}, _M)
	self.update = main.update
	self.u = utilities:new()
	self.db = main.db
	return self
end

function _M:onTextMessage(msg, blocks)
	local u = self.u
	local db = self.db

	if msg.chat.type == 'private' then return end

	if u:is_allowed('texts', msg.chat.id, msg.from) then
		if not blocks[2] then
			local pin_id = db:get('chat:'..msg.chat.id..':pin')
			if pin_id then
				api.sendMessage(msg.chat.id, i18n('Last message generated by `/pin` ^'), "Markdown", nil, nil, pin_id)
			end
			return
		end

		local pin_id = db:get('chat:'..msg.chat.id..':pin')
		local was_deleted
		if pin_id and blocks[1] ~= "newpin" then --try to edit the old message
			local reply_markup, new_text = u:reply_markup_from_text(blocks[2])
			local res, code = api.editMessageText(msg.chat.id, pin_id, nil, new_text:replaceholders(msg, 'rules', 'title'),
				"Markdown", nil, reply_markup)
			if not res then
				if code == 155 then -- the old message doesn't exist. Send a new one in the chat --> set pin_id to false, so the code will enter the next if
					was_deleted = true
					pin_id = nil
				else
					api.sendMessage(msg.chat.id, u:get_sm_error_string(code), "Markdown")
				end
			else
				db:set('chat:'..msg.chat.id..':pin', res.message_id)
				api.sendMessage(msg.chat.id, i18n("Message edited. Check it here"), "Markdown", nil, nil, pin_id)
			end
		end
		if not pin_id or blocks[1] == "newpin" then
			local reply_markup, new_text = u:reply_markup_from_text(blocks[2])
			local res, code = api.sendMessage(msg.chat.id, new_text:replaceholders(msg, 'rules', 'title'), "Markdown",
				reply_markup)
			if not res then
				api.sendMessage(msg.chat.id, u:get_sm_error_string(code), "Markdown")
			else --if the message has been sent, then set its ID as new pinned message
				db:set('chat:'..msg.chat.id..':pin', res.message_id)
				local text
				if was_deleted then
					text = i18n([[The old message generated with `/pin` does not exist anymore, so I can't edit it. This is the new message that can be now pinned
]])
				else
					text = i18n("This message can now be pinned. Use `/pin [new text]` to edit it without having to send it again")
				end
				api.sendMessage(msg.chat.id, text, "Markdown", nil, nil, res.message_id)
			end
		end
	end
end

_M.triggers = {
	onTextMessage = {
		config.cmd..'(pin)$',
		config.cmd..'(pin) (.*)$',
		config.cmd..'(newpin) (.*)$'
	}
}

return _M
